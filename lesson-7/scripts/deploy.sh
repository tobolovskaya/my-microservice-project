#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Django –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –≤ EKS

set -e

echo "üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Django –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –≤ EKS..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
command -v terraform >/dev/null 2>&1 || { echo "‚ùå Terraform –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; exit 1; }
command -v kubectl >/dev/null 2>&1 || { echo "‚ùå kubectl –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; exit 1; }
command -v helm >/dev/null 2>&1 || { echo "‚ùå Helm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; exit 1; }
command -v aws >/dev/null 2>&1 || { echo "‚ùå AWS CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; exit 1; }
command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; exit 1; }

# –ó–º—ñ–Ω–Ω—ñ
AWS_REGION="us-west-2"
CLUSTER_NAME="lesson-7-eks-cluster"
DJANGO_APP_PATH="../dockerized-django"

echo "üìã –ö—Ä–æ–∫ 1: –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —á–µ—Ä–µ–∑ Terraform..."
terraform init
terraform plan
terraform apply -auto-approve

echo "üìã –ö—Ä–æ–∫ 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è kubectl..."
aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

echo "üìã –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
kubectl get nodes

echo "üìã –ö—Ä–æ–∫ 4: –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL ECR —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é..."
ECR_URL=$(terraform output -raw ecr_repository_url)
echo "ECR URL: $ECR_URL"

echo "üìã –ö—Ä–æ–∫ 5: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ ECR..."
aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL

echo "üìã –ö—Ä–æ–∫ 6: –ó–±—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Docker –æ–±—Ä–∞–∑—É..."
if [ -d "$DJANGO_APP_PATH" ]; then
    cd $DJANGO_APP_PATH
    docker build -t django-app .
    docker tag django-app:latest $ECR_URL:latest
    docker push $ECR_URL:latest
    cd - > /dev/null
else
    echo "‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è $DJANGO_APP_PATH –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–±—ñ—Ä–∫—É –æ–±—Ä–∞–∑—É."
fi

echo "üìã –ö—Ä–æ–∫ 7: –û–Ω–æ–≤–ª–µ–Ω–Ω—è Helm values –∑ ECR URL..."
sed -i.bak "s|repository: \"\"|repository: \"$ECR_URL\"|g" charts/django-app/values.yaml

echo "üìã –ö—Ä–æ–∫ 8: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Django –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —á–µ—Ä–µ–∑ Helm..."
helm upgrade --install django-app ./charts/django-app

echo "üìã –ö—Ä–æ–∫ 9: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –ø–æ–¥—ñ–≤..."
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=django-app --timeout=300s

echo "üìã –ö—Ä–æ–∫ 10: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å..."
kubectl get services django-app

echo "üéâ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
echo ""
echo "üìä –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
echo "  kubectl get pods                    # –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ–¥—ñ–≤"
echo "  kubectl get services               # –ü–µ—Ä–µ–≥–ª—è–¥ —Å–µ—Ä–≤—ñ—Å—ñ–≤"
echo "  kubectl get hpa                    # –ü–µ—Ä–µ–≥–ª—è–¥ –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è"
echo "  kubectl logs -f deployment/django-app  # –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤"
echo ""
echo "üåê –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –∞–¥—Ä–µ—Å–∏:"
echo "  kubectl get service django-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'"