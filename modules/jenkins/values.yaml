# Jenkins Helm Chart Values
# Базова конфігурація для Jenkins

controller:
  # Основні налаштування
  image: "jenkins/jenkins"
  tag: "2.426.1-lts"
  imagePullPolicy: "Always"
  
  # Ресурси (будуть перевизначені через Terraform)
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "4Gi"
  
  # Java налаштування
  javaOpts: "-Xmx2g -Xms1g -Djava.awt.headless=true"
  jenkinsOpts: ""
  
  # Безпека
  runAsUser: 1000
  fsGroup: 1000
  securityContextCapabilities: {}
  
  # Налаштування контейнера
  containerSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
  
  # Service Account
  serviceAccount:
    create: false  # Створюється через Terraform
    name: "jenkins-serviceaccount"
    annotations: {}
  
  # Налаштування сервісу
  serviceType: "ClusterIP"
  servicePort: 8080
  targetPort: 8080
  
  # Health checks
  healthProbes: true
  probes:
    startupProbe:
      httpGet:
        path: '/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 12
    livenessProbe:
      httpGet:
        path: '/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 5
    readinessProbe:
      httpGet:
        path: '/login'
        port: http
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
  
  # Ingress налаштування
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hostName: "jenkins.local"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_set_header Accept-Encoding "";
    tls:
      - secretName: jenkins-tls
        hosts:
          - jenkins.local
  
  # Jenkins Configuration as Code (JCasC)
  JCasC:
    defaultConfig: true
    configScripts:
      welcome-message: |
        jenkins:
          systemMessage: |
            Jenkins налаштований через Configuration as Code.
            Ласкаво просимо до CI/CD платформи!
      
      security-settings: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "admin"
                  password: "${JENKINS_ADMIN_PASSWORD}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false
      
      kubernetes-cloud: |
        jenkins:
          clouds:
            - kubernetes:
                name: "kubernetes"
                serverUrl: "https://kubernetes.default"
                namespace: "jenkins"
                jenkinsUrl: "http://jenkins:8080"
                jenkinsTunnel: "jenkins-agent:50000"
                connectTimeout: 5
                readTimeout: 15
                retentionTimeout: 5
                maxRequestsPerHost: 32
                templates:
                  - name: "default"
                    namespace: "jenkins"
                    label: "jenkins-agent"
                    nodeUsageMode: NORMAL
                    containers:
                      - name: "jnlp"
                        image: "jenkins/inbound-agent:latest"
                        workingDir: "/home/jenkins/agent"
                        command: ""
                        args: ""
                        resourceRequestCpu: "100m"
                        resourceRequestMemory: "256Mi"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                    volumes:
                      - hostPathVolume:
                          hostPath: "/var/run/docker.sock"
                          mountPath: "/var/run/docker.sock"
                    yaml: |
                      apiVersion: v1
                      kind: Pod
                      spec:
                        securityContext:
                          runAsUser: 1000
                          runAsGroup: 1000
                          fsGroup: 1000
      
      global-libraries: |
        unclassified:
          globalLibraries:
            libraries:
              - name: "shared-library"
                defaultVersion: "main"
                retriever:
                  modernSCM:
                    scm:
                      git:
                        remote: "https://github.com/your-org/jenkins-shared-library.git"
      
      tools-configuration: |
        tool:
          git:
            installations:
              - name: "Default"
                home: "git"
          maven:
            installations:
              - name: "Maven-3.9"
                properties:
                  - installSource:
                      installers:
                        - maven:
                            id: "3.9.5"
          nodejs:
            installations:
              - name: "NodeJS-18"
                properties:
                  - installSource:
                      installers:
                        - nodeJSInstaller:
                            id: "18.18.2"
                            npmPackagesRefreshHours: 72
          dockerTool:
            installations:
              - name: "Docker"
                properties:
                  - installSource:
                      installers:
                        - dockerInstaller:
                            version: "latest"

# Persistence налаштування
persistence:
  enabled: true
  existingClaim: ""
  storageClass: "gp3"
  accessMode: "ReadWriteOnce"
  size: "20Gi"
  volumes: []
  mounts: []

# Agent налаштування
agent:
  enabled: true
  image: "jenkins/inbound-agent"
  tag: "latest"
  workingDir: "/home/jenkins/agent"
  nodeUsageMode: "NORMAL"
  customJenkinsLabels: []
  
  # Ресурси для агентів
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  
  # Volumes для агентів
  volumes:
    - type: HostPath
      hostPath: /var/run/docker.sock
      mountPath: /var/run/docker.sock
  
  # Pod template
  yamlTemplate: |
    apiVersion: v1
    kind: Pod
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: jnlp
        volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
      volumes:
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock

# Додаткові налаштування
networkPolicy:
  enabled: false
  internalAgents:
    allowed: true
    namespaceLabels: {}
  externalAgents: {}

rbac:
  create: true
  readSecrets: false

serviceAccountAgent:
  create: true
  name: "jenkins-agent"

# Backup налаштування
backup:
  enabled: false
  schedule: "0 2 * * *"
  annotations: {}
  image:
    repository: "maorfr/kube-tasks"
    tag: "0.2.0"
  extraArgs: []
  resources:
    requests:
      memory: "1Gi"
      cpu: "1"
    limits:
      memory: "1Gi"
      cpu: "1"
  env: []

# Prometheus моніторинг
prometheus:
  enabled: true
  serviceMonitorAdditionalLabels: {}
  serviceMonitorNamespace: ""
  scrapeInterval: 60s
  scrapeEndpoint: "/prometheus"
  alertingrules: []
  prometheusRuleNamespace: ""
  relabelings: []
  metricRelabelings: []

# Додаткові контейнери
additionalContainers: []

# Додаткові volumes
additionalVolumes: []

# Checksum pod annotation
checksumConfigMap: true

# Налаштування часового поясу
timezone: "UTC"

# Налаштування для AWS
awsSecurityGroupPolicies:
  enabled: false